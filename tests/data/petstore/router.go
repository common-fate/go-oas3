// This file is generated by github.com/common-fate/go-oas3. DO NOT EDIT.

package output

import (
	"context"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	chi "github.com/go-chi/chi/v5"
	cast "github.com/spf13/cast"
	"net/http"
)

type Hooks struct {
	RequestSecurityParseFailed    func(*http.Request, string, RequestProcessingResult)
	RequestSecurityParseCompleted func(*http.Request, string)
	RequestSecurityCheckFailed    func(*http.Request, string, string, RequestProcessingResult)
	RequestSecurityCheckCompleted func(*http.Request, string, string)
	RequestBodyUnmarshalFailed    func(*http.Request, string, RequestProcessingResult)
	RequestHeaderParseFailed      func(*http.Request, string, string, RequestProcessingResult)
	RequestPathParseFailed        func(*http.Request, string, string, RequestProcessingResult)
	RequestQueryParseFailed       func(*http.Request, string, string, RequestProcessingResult)
	RequestBodyValidationFailed   func(*http.Request, string, RequestProcessingResult)
	RequestHeaderValidationFailed func(*http.Request, string, RequestProcessingResult)
	RequestPathValidationFailed   func(*http.Request, string, RequestProcessingResult)
	RequestQueryValidationFailed  func(*http.Request, string, RequestProcessingResult)
	RequestBodyUnmarshalCompleted func(*http.Request, string)
	RequestHeaderParseCompleted   func(*http.Request, string)
	RequestPathParseCompleted     func(*http.Request, string)
	RequestQueryParseCompleted    func(*http.Request, string)
	RequestParseCompleted         func(*http.Request, string)
	RequestProcessingCompleted    func(*http.Request, string)
	RequestRedirectStarted        func(*http.Request, string, string)
	ResponseBodyMarshalCompleted  func(*http.Request, string)
	ResponseBodyWriteCompleted    func(*http.Request, string, int)
	ResponseBodyMarshalFailed     func(http.ResponseWriter, *http.Request, string, error)
	ResponseBodyWriteFailed       func(*http.Request, string, int, error)
	ServiceCompleted              func(*http.Request, string)
}

type requestProcessingResultType uint8

const (
	BodyUnmarshalFailed requestProcessingResultType = iota + 1
	BodyValidationFailed
	HeaderParseFailed
	HeaderValidationFailed
	QueryParseFailed
	QueryValidationFailed
	PathParseFailed
	PathValidationFailed
	SecurityParseFailed
	SecurityCheckFailed
	ParseSucceed
)

type RequestProcessingResult struct {
	error error
	typee requestProcessingResultType
}

func NewRequestProcessingResult(t requestProcessingResultType, err error) RequestProcessingResult {
	return RequestProcessingResult{
		error: err,
		typee: t,
	}
}

func (r RequestProcessingResult) Type() requestProcessingResultType {
	return r.typee
}

func (r RequestProcessingResult) Err() error {
	return r.error
}

func DefaultHandler(impl DefaultService, r chi.Router, hooks *Hooks) http.Handler {
	router := &defaultRouter{router: r, service: impl, hooks: hooks}

	router.mount()

	return router.router
}

type defaultRouter struct {
	router  chi.Router
	service DefaultService
	hooks   *Hooks
}

func (router *defaultRouter) mount() {
	router.router.Get("/pets", router.GetPets)
	router.router.Post("/pets", router.PostPets)
	router.router.Delete("/pets/{id}", router.DeletePetsID)
	router.router.Get("/pets/{id}", router.GetPetsID)
}

func (router *defaultRouter) parseGetPetsRequest(r *http.Request) (request GetPetsRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	queryTags := r.URL.Query()["tags"]
	request.Query.Tags = queryTags

	queryLimit := r.URL.Query().Get("limit")
	request.Query.Limit = cast.ToInt(queryLimit)

	if err := request.Query.Validate(); err != nil {
		request.ProcessingResult = RequestProcessingResult{error: err, typee: QueryValidationFailed}
		if router.hooks.RequestQueryValidationFailed != nil {
			router.hooks.RequestQueryValidationFailed(r, "GetPets", request.ProcessingResult)
		}

		return
	}

	if router.hooks.RequestQueryParseCompleted != nil {
		router.hooks.RequestQueryParseCompleted(r, "GetPets")
	}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "GetPets")
	}

	return
}

func (router *defaultRouter) GetPets(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.GetPets(r.Context(), router.parseGetPetsRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "GetPets", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "GetPets")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "GetPets")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "GetPets", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "GetPets")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "GetPets", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "GetPets", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "GetPets", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "GetPets")
	}
}

func (router *defaultRouter) parsePostPetsRequest(r *http.Request) (request PostPetsRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	var (
		body      NewPet
		decodeErr error
	)
	decodeErr = json.NewDecoder(r.Body).Decode(&body)
	if decodeErr != nil {
		request.ProcessingResult = RequestProcessingResult{error: decodeErr, typee: BodyUnmarshalFailed}
		if router.hooks.RequestBodyUnmarshalFailed != nil {
			router.hooks.RequestBodyUnmarshalFailed(r, "PostPets", request.ProcessingResult)

			return
		}

		return
	}

	request.Body = body

	if err := request.Body.Validate(); err != nil {
		request.ProcessingResult = RequestProcessingResult{error: err, typee: BodyValidationFailed}
		if router.hooks.RequestBodyValidationFailed != nil {
			router.hooks.RequestBodyValidationFailed(r, "PostPets", request.ProcessingResult)
		}

		return
	}

	if router.hooks.RequestBodyUnmarshalCompleted != nil {
		router.hooks.RequestBodyUnmarshalCompleted(r, "PostPets")
	}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "PostPets")
	}

	return
}

func (router *defaultRouter) PostPets(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.PostPets(r.Context(), router.parsePostPetsRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "PostPets", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "PostPets")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "PostPets")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "PostPets", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "PostPets")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "PostPets", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "PostPets", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "PostPets", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "PostPets")
	}
}

func (router *defaultRouter) parseDeletePetsIDRequest(r *http.Request) (request DeletePetsIDRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	pathID := chi.URLParam(r, "id")
	if pathID == "" {
		err := fmt.Errorf("id is empty")

		request.ProcessingResult = RequestProcessingResult{error: err, typee: PathParseFailed}
		if router.hooks.RequestPathParseFailed != nil {
			router.hooks.RequestPathParseFailed(r, "DeletePetsID", "id", request.ProcessingResult)
		}

		return
	}

	request.Path.ID = cast.ToInt(pathID)

	if err := request.Path.Validate(); err != nil {
		request.ProcessingResult = RequestProcessingResult{error: err, typee: PathValidationFailed}
		if router.hooks.RequestPathValidationFailed != nil {
			router.hooks.RequestPathValidationFailed(r, "DeletePetsID", request.ProcessingResult)
		}

		return
	}

	if router.hooks.RequestPathParseCompleted != nil {
		router.hooks.RequestPathParseCompleted(r, "DeletePetsID")
	}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "DeletePetsID")
	}

	return
}

func (router *defaultRouter) DeletePetsID(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.DeletePetsID(r.Context(), router.parseDeletePetsIDRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "DeletePetsID", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "DeletePetsID")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "DeletePetsID")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "DeletePetsID", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "DeletePetsID")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "DeletePetsID", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "DeletePetsID", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "DeletePetsID", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "DeletePetsID")
	}
}

func (router *defaultRouter) parseGetPetsIDRequest(r *http.Request) (request GetPetsIDRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	pathID := chi.URLParam(r, "id")
	if pathID == "" {
		err := fmt.Errorf("id is empty")

		request.ProcessingResult = RequestProcessingResult{error: err, typee: PathParseFailed}
		if router.hooks.RequestPathParseFailed != nil {
			router.hooks.RequestPathParseFailed(r, "GetPetsID", "id", request.ProcessingResult)
		}

		return
	}

	request.Path.ID = cast.ToInt(pathID)

	if err := request.Path.Validate(); err != nil {
		request.ProcessingResult = RequestProcessingResult{error: err, typee: PathValidationFailed}
		if router.hooks.RequestPathValidationFailed != nil {
			router.hooks.RequestPathValidationFailed(r, "GetPetsID", request.ProcessingResult)
		}

		return
	}

	if router.hooks.RequestPathParseCompleted != nil {
		router.hooks.RequestPathParseCompleted(r, "GetPetsID")
	}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "GetPetsID")
	}

	return
}

func (router *defaultRouter) GetPetsID(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.GetPetsID(r.Context(), router.parseGetPetsIDRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "GetPetsID", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "GetPetsID")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "GetPetsID")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "GetPetsID", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "GetPetsID")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "GetPetsID", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "GetPetsID", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "GetPetsID", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "GetPetsID")
	}
}

type response struct {
	statusCode  int
	body        interface{}
	contentType string
	redirectURL string
	headers     map[string]string
	cookies     []http.Cookie
}

type responseInterface interface {
	statusCode() int
	body() interface{}
	contentType() string
	redirectURL() string
	cookies() []http.Cookie
	headers() map[string]string
}

type DeletePetsIDResponse interface {
	responseInterface
	deletePetsIDResponse()
}

type deletePetsIDResponse struct {
	response
}

func (deletePetsIDResponse) deletePetsIDResponse() {}

func (response deletePetsIDResponse) statusCode() int {
	return response.response.statusCode
}

func (response deletePetsIDResponse) body() interface{} {
	return response.response.body
}

func (response deletePetsIDResponse) contentType() string {
	return response.response.contentType
}

func (response deletePetsIDResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response deletePetsIDResponse) headers() map[string]string {
	return response.response.headers
}

func (response deletePetsIDResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type GetPetsIDResponse interface {
	responseInterface
	getPetsIDResponse()
}

type getPetsIDResponse struct {
	response
}

func (getPetsIDResponse) getPetsIDResponse() {}

func (response getPetsIDResponse) statusCode() int {
	return response.response.statusCode
}

func (response getPetsIDResponse) body() interface{} {
	return response.response.body
}

func (response getPetsIDResponse) contentType() string {
	return response.response.contentType
}

func (response getPetsIDResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response getPetsIDResponse) headers() map[string]string {
	return response.response.headers
}

func (response getPetsIDResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type GetPetsResponse interface {
	responseInterface
	getPetsResponse()
}

type getPetsResponse struct {
	response
}

func (getPetsResponse) getPetsResponse() {}

func (response getPetsResponse) statusCode() int {
	return response.response.statusCode
}

func (response getPetsResponse) body() interface{} {
	return response.response.body
}

func (response getPetsResponse) contentType() string {
	return response.response.contentType
}

func (response getPetsResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response getPetsResponse) headers() map[string]string {
	return response.response.headers
}

func (response getPetsResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type PostPetsResponse interface {
	responseInterface
	postPetsResponse()
}

type postPetsResponse struct {
	response
}

func (postPetsResponse) postPetsResponse() {}

func (response postPetsResponse) statusCode() int {
	return response.response.statusCode
}

func (response postPetsResponse) body() interface{} {
	return response.response.body
}

func (response postPetsResponse) contentType() string {
	return response.response.contentType
}

func (response postPetsResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response postPetsResponse) headers() map[string]string {
	return response.response.headers
}

func (response postPetsResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type GetPetsApplicationjson []Pet
type getPetsStatusCodeResponseBuilder struct {
	response
}

func GetPetsResponseBuilder() *getPetsStatusCodeResponseBuilder {
	return new(getPetsStatusCodeResponseBuilder)
}

func (builder *getPetsStatusCodeResponseBuilder) StatusCode200() *getPets200ContentTypeBuilder {
	builder.response.statusCode = 200

	return &getPets200ContentTypeBuilder{response: builder.response}
}

type getPets200ContentTypeBuilder struct {
	response
}

type GetPets200ApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPets200ApplicationJsonResponseBuilder) Build() GetPetsResponse {
	return getPetsResponse{response: builder.response}
}

type getPets200ApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPets200ContentTypeBuilder) Body(body GetPetsApplicationjson) *GetPets200ApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPets200ApplicationJsonResponseBuilder{response: builder.response}
}

func (builder *getPetsStatusCodeResponseBuilder) StatusCodedefault() *getPetsdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &getPetsdefaultContentTypeBuilder{response: builder.response}
}

type getPetsdefaultContentTypeBuilder struct {
	response
}

type GetPetsdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPetsdefaultApplicationJsonResponseBuilder) Build() GetPetsResponse {
	return getPetsResponse{response: builder.response}
}

type getPetsdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPetsdefaultContentTypeBuilder) Body(body ApiError) *GetPetsdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPetsdefaultApplicationJsonResponseBuilder{response: builder.response}
}

type postPetsStatusCodeResponseBuilder struct {
	response
}

func PostPetsResponseBuilder() *postPetsStatusCodeResponseBuilder {
	return new(postPetsStatusCodeResponseBuilder)
}

func (builder *postPetsStatusCodeResponseBuilder) StatusCode200() *postPets200ContentTypeBuilder {
	builder.response.statusCode = 200

	return &postPets200ContentTypeBuilder{response: builder.response}
}

type postPets200ContentTypeBuilder struct {
	response
}

type PostPets200ApplicationJsonResponseBuilder struct {
	response
}

func (builder *PostPets200ApplicationJsonResponseBuilder) Build() PostPetsResponse {
	return postPetsResponse{response: builder.response}
}

type postPets200ApplicationJsonBodyBuilder struct {
	response
}

func (builder *postPets200ContentTypeBuilder) Body(body Pet) *PostPets200ApplicationJsonResponseBuilder {
	builder.response.body = body

	return &PostPets200ApplicationJsonResponseBuilder{response: builder.response}
}

func (builder *postPetsStatusCodeResponseBuilder) StatusCodedefault() *postPetsdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &postPetsdefaultContentTypeBuilder{response: builder.response}
}

type postPetsdefaultContentTypeBuilder struct {
	response
}

type PostPetsdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *PostPetsdefaultApplicationJsonResponseBuilder) Build() PostPetsResponse {
	return postPetsResponse{response: builder.response}
}

type postPetsdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *postPetsdefaultContentTypeBuilder) Body(body ApiError) *PostPetsdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &PostPetsdefaultApplicationJsonResponseBuilder{response: builder.response}
}

type deletePetsIDStatusCodeResponseBuilder struct {
	response
}

func DeletePetsIDResponseBuilder() *deletePetsIDStatusCodeResponseBuilder {
	return new(deletePetsIDStatusCodeResponseBuilder)
}

func (builder *deletePetsIDStatusCodeResponseBuilder) StatusCode204() *DeletePetsID204ResponseBuilder {
	builder.response.statusCode = 204

	return &DeletePetsID204ResponseBuilder{response: builder.response}
}

type DeletePetsID204ResponseBuilder struct {
	response
}

func (builder *DeletePetsID204ResponseBuilder) Build() DeletePetsIDResponse {
	return deletePetsIDResponse{response: builder.response}
}

func (builder *deletePetsIDStatusCodeResponseBuilder) StatusCodedefault() *deletePetsIDdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &deletePetsIDdefaultContentTypeBuilder{response: builder.response}
}

type deletePetsIDdefaultContentTypeBuilder struct {
	response
}

type DeletePetsIDdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *DeletePetsIDdefaultApplicationJsonResponseBuilder) Build() DeletePetsIDResponse {
	return deletePetsIDResponse{response: builder.response}
}

type deletePetsIDdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *deletePetsIDdefaultContentTypeBuilder) Body(body ApiError) *DeletePetsIDdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &DeletePetsIDdefaultApplicationJsonResponseBuilder{response: builder.response}
}

type getPetsIDStatusCodeResponseBuilder struct {
	response
}

func GetPetsIDResponseBuilder() *getPetsIDStatusCodeResponseBuilder {
	return new(getPetsIDStatusCodeResponseBuilder)
}

func (builder *getPetsIDStatusCodeResponseBuilder) StatusCodedefault() *getPetsIDdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &getPetsIDdefaultContentTypeBuilder{response: builder.response}
}

type getPetsIDdefaultContentTypeBuilder struct {
	response
}

type GetPetsIDdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPetsIDdefaultApplicationJsonResponseBuilder) Build() GetPetsIDResponse {
	return getPetsIDResponse{response: builder.response}
}

type getPetsIDdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPetsIDdefaultContentTypeBuilder) Body(body ApiError) *GetPetsIDdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPetsIDdefaultApplicationJsonResponseBuilder{response: builder.response}
}

func (builder *getPetsIDStatusCodeResponseBuilder) StatusCode200() *getPetsID200ContentTypeBuilder {
	builder.response.statusCode = 200

	return &getPetsID200ContentTypeBuilder{response: builder.response}
}

type getPetsID200ContentTypeBuilder struct {
	response
}

type GetPetsID200ApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPetsID200ApplicationJsonResponseBuilder) Build() GetPetsIDResponse {
	return getPetsIDResponse{response: builder.response}
}

type getPetsID200ApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPetsID200ContentTypeBuilder) Body(body Pet) *GetPetsID200ApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPetsID200ApplicationJsonResponseBuilder{response: builder.response}
}

type DefaultService interface {
	GetPets(context.Context, GetPetsRequest) GetPetsResponse
	PostPets(context.Context, PostPetsRequest) PostPetsResponse
	DeletePetsID(context.Context, DeletePetsIDRequest) DeletePetsIDResponse
	GetPetsID(context.Context, GetPetsIDRequest) GetPetsIDResponse
}

type GetPetsRequestQuery struct {
	Limit int
	Tags  []string
}

func (query GetPetsRequestQuery) GetLimit() int {
	return query.Limit
}

func (query GetPetsRequestQuery) GetTags() []string {
	return query.Tags
}

func (query GetPetsRequestQuery) Validate() error {
	return nil
}

type GetPetsRequest struct {
	Query            GetPetsRequestQuery
	ProcessingResult RequestProcessingResult
}

type PostPetsRequest struct {
	Body             NewPet
	ProcessingResult RequestProcessingResult
}

type DeletePetsIDRequestPath struct {
	ID int
}

func (path DeletePetsIDRequestPath) GetID() int {
	return path.ID
}

func (path DeletePetsIDRequestPath) Validate() error {
	return nil
}

type DeletePetsIDRequest struct {
	Path             DeletePetsIDRequestPath
	ProcessingResult RequestProcessingResult
}

type GetPetsIDRequestPath struct {
	ID int
}

func (path GetPetsIDRequestPath) GetID() int {
	return path.ID
}

func (path GetPetsIDRequestPath) Validate() error {
	return nil
}

type GetPetsIDRequest struct {
	Path             GetPetsIDRequestPath
	ProcessingResult RequestProcessingResult
}

type SecurityScheme string

const ()

type securityProcessor struct {
	scheme  SecurityScheme
	extract func(r *http.Request) (string, string, bool)
	handle  func(r *http.Request, scheme SecurityScheme, name string, value string) error
}

var securityExtractorsFuncs = map[SecurityScheme]func(r *http.Request) (string, string, bool){}

type SecuritySchemas interface{}

type SecurityCheckResult struct {
	Scheme SecurityScheme
	Value  string
}
